head	1.2;
access;
symbols;
locks; strict;
comment	@// @;


1.2
date	2003.03.03.16.52.06;	author roberto;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.24.10.05.19;	author roberto;	state Exp;
branches;
next	;


desc
@initial submission
@


1.2
log
@modified for posxyz/momxyz instead of dip.pos/dip.mom
@
text
@% dipfit_reject() - remove dipole models with a poor fit
%
% Usage: 
%  >> dipout = dipfit_reject( model, reject )
%
% Inputs:
%   model	struct array with a dipole model for each component
%
% Outputs:
%   dipout	struct array with a dipole model for each component
%
% Author: Robert Oostenveld, SMI/FCDC, Nijmegen 2003

% SMI, University Aalborg, Denmark http://www.smi.auc.dk/
% FC Donders Centre, University Nijmegen, the Netherlands http://www.fcdonders.kun.nl/

% Copyright (C) 2003 Robert Oostenveld, SMI/FCDC roberto@@miba.auc.dk
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

% $Log: dipfit_reject.m,v $
% Revision 1.1  2003/02/24 10:05:19  roberto
% Initial revision
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [dipout] = dipfit_reject(model, reject)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin < 1
   help dipfit_reject;
   return;
end;

for i=1:length(model)
  if model(i).rv>reject
    % reject this dipole model by replacing it by an empty model
    dipout(i).posxyz = [];
    dipout(i).momxyz = [];
    dipout(i).rv  = 1;
  else
    dipout(i).posxyz = model(i).posxyz;
    dipout(i).momxyz = model(i).momxyz;
    dipout(i).rv     = model(i).rv;
  end
end

@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
%  >> modelout = dipfit_reject( model, reject )
d7 1
a7 1
%   model       struct array with a dipole model for each component
d10 1
a10 1
%   modelout    struct array with a dipole model for each component
d34 3
d39 1
a39 1
function [modelout] = dipfit_reject(model, reject)
d50 3
a52 2
    modelout(i).dip = [];
    modelout(i).rv  = 1;
d54 3
a56 2
    modelout(i).dip = model(i).dip;
    modelout(i).rv  = model(i).rv;
@
