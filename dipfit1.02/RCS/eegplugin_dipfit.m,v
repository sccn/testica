head	1.27;
access;
symbols;
locks; strict;
comment	@// @;


1.27
date	2005.03.04.23.33.44;	author arno;	state Exp;
branches;
next	1.26;

1.26
date	2004.07.09.23.25.49;	author arno;	state Exp;
branches;
next	1.25;

1.25
date	2004.07.09.22.10.24;	author arno;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.05.01.16.48;	author arno;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.05.01.08.58;	author arno;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.05.01.04.20;	author arno;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.04.01.42.25;	author arno;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.26.03.37.14;	author arno;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.25.19.20.33;	author arno;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.25.19.18.43;	author arno;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.17.20.08.10;	author arno;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.05.16.21.21;	author arno;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.31.18.09.33;	author arno;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.31.18.08.32;	author arno;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.29.16.33.31;	author arno;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.11.01.53.36;	author arno;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.11.01.52.51;	author arno;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.11.01.51.48;	author arno;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.11.01.51.05;	author arno;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.11.01.50.26;	author arno;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.11.01.22.05;	author arno;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.09.18.20.22;	author arno;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.13.16.53.13;	author arno;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.12.00.44.04;	author arno;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.26.16.23.03;	author arno;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.24.22.32.50;	author arno;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.24.19.53.26;	author arno;	state Exp;
branches;
next	;


desc
@@


1.27
log
@menu text
@
text
@% eegplugin_dipfit() - DIPFIT plugin version 1.0 for EEGLAB menu. 
%                      DIPFIT is the dipole fitting Matlab Toolbox of 
%                      Robert Oostenveld (in collaboration with A. Delorme).
%
% Usage:
%   >> eegplugin_dipfit(fig, trystrs, catchstrs);
%
% Inputs:
%   fig        - [integer] eeglab figure.
%   trystrs    - [struct] "try" strings for menu callbacks.
%   catchstrs  - [struct] "catch" strings for menu callbacks.
%
% Notes:
%   To create a new plugin, simply create a file beginning with "eegplugin_"
%   and place it in your eeglab folder. It will then be automatically 
%   detected by eeglab. See also this source code internal comments.
%   For eeglab to return errors and add the function's results to 
%   the eeglab history, menu callback must be nested into "try" and 
%   a "catch" strings. For more information on how to create eeglab 
%   plugins, see http://www.sccn.ucsd.edu/eeglab/contrib.html
%
% Author: Arnaud Delorme, CNL / Salk Institute, 22 February 2003
%
% See also: eeglab()

%123456789012345678901234567890123456789012345678901234567890123456789012

% Copyright (C) 2003 Arnaud Delorme, Salk Institute, arno@@salk.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

% $Log: eegplugin_dipfit.m,v $
% Revision 1.26  2004/07/09 23:25:49  arno
% dipfit version
%
% Revision 1.25  2004/07/09 22:10:24  arno
% change dipfit revision number
%
% Revision 1.24  2003/12/05 01:16:48  arno
% still version
%
% Revision 1.23  2003/12/05 01:08:58  arno
% version
%
% Revision 1.22  2003/12/05 01:04:20  arno
% revision number
%
% Revision 1.21  2003/12/04 01:42:25  arno
% adding path
%
% Revision 1.20  2003/11/26 03:37:14  arno
% add dipfit folder to path
%
% Revision 1.19  2003/11/25 19:20:33  arno
% same
%
% Revision 1.18  2003/11/25 19:18:43  arno
% conforming to smart plugin
%
% Revision 1.17  2003/11/17 20:08:10  arno
% menu
%
% Revision 1.16  2003/11/05 16:21:21  arno
% homogenous -> homogeneous
%
% Revision 1.15  2003/10/31 18:09:33  arno
% sparator position
%
% Revision 1.14  2003/10/31 18:08:32  arno
% menus
%
% Revision 1.13  2003/10/29 16:33:31  arno
% manual fitting
%
% Revision 1.12  2003/10/11 01:53:36  arno
% *** empty log message ***
%
% Revision 1.11  2003/10/11 01:52:51  arno
% *** empty log message ***
%
% Revision 1.10  2003/10/11 01:51:48  arno
% *** empty log message ***
%
% Revision 1.9  2003/10/11 01:51:05  arno
% same
%
% Revision 1.8  2003/10/11 01:50:26  arno
% update
% menu
%
% Revision 1.7  2003/10/11 01:22:05  arno
% adding automatic fitting menu
%
% Revision 1.6  2003/10/09 18:20:22  arno
% update munu for grid
%
% Revision 1.5  2003/06/13 16:53:13  arno
% checking electrodes
%
% Revision 1.4  2003/03/12 00:44:04  arno
% adding menu for plotting components
%
% Revision 1.3  2003/02/26 16:23:03  arno
% menu correction
%
% Revision 1.2  2003/02/24 22:32:50  arno
% updating menus
%
% Revision 1.1  2003/02/24 19:53:26  arno
% Initial revision
%

function vers = eegplugin_dipfit(fig, trystrs, catchstrs)
    
    vers = 'dipfit1.01';
    if nargin < 3
        error('eegplugin_dipfit requires 3 arguments');
    end;
    
    % add dipfit folder to path
    % -----------------------
    if ~exist('pop_dipfit_manual')
        p = which('eegplugin_dipfit');
        p = p(1:findstr(p,'eegplugin_dipfit.m')-1);
        addpath([ p vers ] );
    end;

    % find tools menu
    % ---------------
    menu = findobj(fig, 'tag', 'tools'); 
    % tag can be 
    % 'import data'  -> File > import data menu
    % 'import epoch' -> File > import epoch menu
    % 'import event' -> File > import event menu
    % 'export'       -> File > export
    % 'tools'        -> tools menu
    % 'plot'         -> plot menu

    % command to check that the '.source' is present in the EEG structure 
    % -------------------------------------------------------------------
    check_dipfit = ['if ~isfield(EEG, ''dipfit''), error(''Run the dipole setting first''); end;'  ...
                 trystrs.no_check ];
    check_dipfitnocheck = ['if ~isfield(EEG, ''dipfit''), error(''Run the dipole setting first''); end; ' ...
                 'h(''% no history for manual DIPFIT dipole localization'');'  ...
                 trystrs.no_check ];
    check_chans = [ '[EEG tmpres] = eeg_checkset(EEG, ''chanlocs_homogeneous'');' ...
                       'if ~isempty(tmpres), h(tmpres), end; clear tmpres;' ];
    
    % menu callback commands
    % ----------------------
    comauto    = [ trystrs.check_ica check_chans  '[EEG LASTCOM] = pop_multifit(EEG);'     catchstrs.store_and_hist ];
    comsetting = [ trystrs.check_ica check_chans '[EEG LASTCOM]=pop_dipfit_settings(EEG);' catchstrs.store_and_hist ]; 
    combatch   = [ check_dipfit check_chans  '[EEG LASTCOM] = pop_dipfit_batch(EEG);'      catchstrs.store_and_hist ];
    comfit     = [ check_dipfitnocheck check_chans 'EEG = pop_dipfit_manual(EEG);'         catchstrs.store_and_hist ];
    complot    = [ check_dipfit check_chans 'LASTCOM = pop_dipplot(EEG);'                  catchstrs.add_to_hist ];

    
    % create menus
    % ------------
    submenu = uimenu( menu, 'Label', 'Locate dipoles using DIPFIT 1.x');
    uimenu( submenu, 'Label', 'Autofit components'       , 'CallBack', comauto);
    uimenu( submenu, 'Label', 'Head model and settings'  , 'CallBack', comsetting, 'separator', 'on');
    uimenu( submenu, 'Label', 'Coarse fit (grid scan)'   , 'CallBack', combatch);
    uimenu( submenu, 'Label', 'Fine fit (iterative)'     , 'CallBack', comfit);
    uimenu( submenu, 'Label', 'Plot component dipoles'   , 'CallBack', complot, 'separator', 'on');
@


1.26
log
@dipfit version
@
text
@d45 3
d172 1
a172 1
    submenu = uimenu( menu, 'Label', 'Locate dipoles using DIPFIT');
@


1.25
log
@change dipfit revision number
@
text
@d45 3
d122 1
a122 1
function eegplugin_dipfit(fig, trystrs, catchstrs)
d124 1
d134 1
a134 1
        addpath([ p 'dipfit1.01' ] );
@


1.24
log
@still version
@
text
@d45 3
d130 1
a130 1
        addpath([ p 'dipfit1.0' ] );
@


1.23
log
@version
@
text
@d45 3
d125 2
a126 2
        p = which('eegplugin_dipfit1_0');
        p = p(1:findstr(p,'eegplugin_dipfit1_0.m')-1);
@


1.22
log
@revision number
@
text
@d1 3
a3 2
% eegplugin_dipfit() - DIPFIT plugin for EEGLAB menu. DIPFIT is the dipole
%                      fitting Matlab Toolbox of Robert Oostenveld.
d45 3
@


1.21
log
@adding path
@
text
@d44 3
d118 3
a120 3
        p = which('eegplugin_dipfit');
        p = p(1:findstr(p,'eegplugin_dipfit.m')-1);
        addpath([ p 'dipfit' ] );
@


1.20
log
@add dipfit folder to path
@
text
@d44 3
d113 6
a118 4
    % -------------------------
    p = which('eeglab.m');
    p = p(1:findstr(p,'eeglab.m')-1);
    addpath([ p 'dipfit' ] );
@


1.19
log
@same
@
text
@d13 7
a19 2
%   See help message of eeglabplugin_besa() for more information on how 
%   to create plugin. See also http://www.sccn.ucsd.edu/eeglab/contrib.html
d44 3
d109 6
@


1.18
log
@conforming to smart plugin
@
text
@d39 3
d108 1
@


1.17
log
@menu
@
text
@d5 1
a5 1
%   >> eegplugin_dipfit(menu, trystrs, catchstrs);
d8 3
a10 3
%   menu       - [float] eeglab menu handle
%   trystrs    - [struct] "try" strings for menu callbacks. See notes. 
%   trystrs    - [struct] "catch" strings for menu callbacks. See notes. 
d13 2
a14 2
%   For more information on how to create plugin,
%   see http://www.sccn.ucsd.edu/eeglab/contrib.html
d39 3
d92 1
a92 1
function eegplugin_dipfit(menu, trystrs, catchstrs)
d98 10
@


1.16
log
@homogenous -> homogeneous
@
text
@d39 3
d117 1
a117 1
    uimenu( submenu, 'Label', 'Auto fit'                 , 'CallBack', comauto);
d120 1
a120 1
    uimenu( submenu, 'Label', 'Final fit'                , 'CallBack', comfit);
@


1.15
log
@sparator position
@
text
@d39 3
d99 1
a99 1
    check_chans = [ '[EEG tmpres] = eeg_checkset(EEG, ''chanlocs_homogenous'');' ...
@


1.14
log
@menus
@
text
@d39 3
d114 2
a115 2
    uimenu( submenu, 'Label', 'Final fit'                , 'CallBack', comfit, 'separator', 'on');
    uimenu( submenu, 'Label', 'Plot component dipoles'   , 'CallBack', complot);
@


1.13
log
@manual fitting
@
text
@d39 3
d108 5
a112 5
    uimenu( submenu, 'Label', 'Automatic fitting'          , 'CallBack', comauto);
    uimenu( submenu, 'Label', 'Settings for dipole fitting', 'CallBack', comsetting, 'separator', 'on');
    uimenu( submenu, 'Label', 'Scan ICA components on grid', 'CallBack', combatch);
    uimenu( submenu, 'Label', 'Interactive fitting'        , 'CallBack', comfit);
    uimenu( submenu, 'Label', 'Plot component dipoles'     , 'CallBack', complot);
@


1.12
log
@*** empty log message ***
@
text
@d39 3
d85 1
a85 2
    check_dipfit = ['if ~isfield(EEG, ''dipfit''), error(''Run the dipole setting first''); end; ' ...
                 'h(''% no history yet for DIPFIT dipole localization'');'  ...
d95 1
a97 1
    comauto   = [ trystrs.check_ica check_chans  '[EEG LASTCOM] = pop_multifit(EEG);'          catchstrs.store_and_hist ];
d99 1
a99 1
    complot    = [ check_dipfit check_chans 'pop_dipplot(EEG);'                  catchstrs.add_to_hist ];
@


1.11
log
@*** empty log message ***
@
text
@d39 3
d95 1
a95 1
    comauto   = [ check_dipfit check_chans  '[EEG LASTCOM] = pop_multifit(EEG);'          catchstrs.store_and_hist ];
@


1.10
log
@*** empty log message ***
@
text
@d39 3
d100 2
a101 2
    uimenu( submenu, 'Label', 'Automatic fitting'          , 'CallBack', comauto, 'separator', 'on');
    uimenu( submenu, 'Label', 'Settings for dipole fitting', 'CallBack', comsetting);
@


1.9
log
@same
@
text
@d39 3
d97 1
a97 1
    uimenu( submenu, 'Label', 'Automatic fitting'          , 'CallBack', comauto, 'delimiter', 'on');
@


1.8
log
@update
menu
@
text
@d39 4
d86 1
a86 1
    combauto   = [ check_dipfit check_chans  '[EEG LASTCOM] = pop_multifit(EEG);'          catchstrs.store_and_hist ];
@


1.7
log
@adding automatic fitting menu
@
text
@d39 3
d90 1
d92 1
a92 2
    uimenu( submenu, 'Label', 'Scan ICA components on grid'        , 'CallBack', combatch);
    uimenu( submenu, 'Label', 'Automatic fitting'          , 'CallBack', comauto);
@


1.6
log
@update munu for grid
@
text
@d39 3
d69 3
d77 4
a80 3
    comsetting = [ trystrs.check_ica check_chans 'EEG=pop_dipfit_settings(EEG);' catchstrs.store_and_hist ]; 
    combatch   = [ check_dipfit check_chans  'EEG = pop_dipfit_batch(EEG);'      catchstrs.store_and_hist ];
    comfit     = [ check_dipfit check_chans 'EEG = pop_dipfit_manual(EEG);'      catchstrs.store_and_hist ];
d89 1
@


1.5
log
@checking electrodes
@
text
@d39 3
d81 1
a81 1
    uimenu( submenu, 'Label', 'Scan ICA components'        , 'CallBack', combatch);
@


1.4
log
@adding menu for plotting components
@
text
@d39 3
d63 2
d68 4
a71 4
    comsetting = [ trystrs.check_ica 'EEG=pop_dipfit_settings(EEG);' catchstrs.store_and_hist ]; 
    combatch   = [ check_dipfit  'EEG = pop_dipfit_batch(EEG);'      catchstrs.store_and_hist ];
    comfit     = [ check_dipfit 'EEG = pop_dipfit_manual(EEG);'      catchstrs.store_and_hist ];
    complot    = [ check_dipfit 'pop_dipplot(EEG);'                  catchstrs.add_to_hist ];
@


1.3
log
@menu correction
@
text
@d39 3
d65 3
a67 7
    comfit     = [ check_dipfit 'EEG = pop_dipfit_manual(EEG);'       catchstrs.store_and_hist ];
    complot2   = [ check_dipfit 'besaplot(EEG.sources, ''image'', ''mri'');' catchstrs.add_to_hist ];
    complot3   = [ check_dipfit 'besaplot(EEG.sources, ''summary'', ''on'',' ...
                  ' ''dipolesize'', 30, ''mesh'', ''off'');' catchstrs.add_to_hist ];
    complot4  = [ check_dipfit 'besaplot(EEG.sources, ''image'', ''mri'',' ...
                  ' ''summary'', ''on'', ''dipolesize'', 30, ''mesh'', ''off'');'  ...
                  catchstrs.add_to_hist ];
d75 1
@


1.2
log
@updating menus
@
text
@d39 3
d62 1
a62 1
    comfit     = [ check_dipfit 'EEG = pop_dipfit_batch(EEG);'       catchstrs.store_and_hist ];
@


1.1
log
@Initial revision
@
text
@d39 3
d51 1
a51 1
    check_dipfit = ['[EEG LASTCOM] = eeg_checkset(EEG, ''dipfit''); ' ...
d57 5
a61 5
    comexport = [ trystrs.check_ica 'besaexport(EEG);' catchstrs.add_to_hist ]; 
    comimport = [ trystrs.check_ica 'EEG = besaimport(EEG);' catchstrs.store_and_hist ];
    complot1  = [ check_besa 'besaplot(EEG.sources);' catchstrs.add_to_hist ];
    complot2  = [ check_besa 'besaplot(EEG.sources, ''image'', ''mri'');' catchstrs.add_to_hist ];
    complot3  = [ check_besa 'besaplot(EEG.sources, ''summary'', ''on'',' ...
d63 1
a63 1
    complot4  = [ check_besa 'besaplot(EEG.sources, ''image'', ''mri'',' ...
d69 4
a72 7
    submenu = uimenu( menu, 'Label', 'Locate dipoles using BESA');
    uimenu( submenu, 'Label', 'Export components to BESA'     , 'CallBack', comexport);
    uimenu( submenu, 'Label', 'Import dipoles from BESA'      , 'CallBack', comimport);
    uimenu( submenu, 'Label', 'Plot dipoles on BESA head'     , 'CallBack', complot1);
    uimenu( submenu, 'Label', 'Plot dipoles on MRI head'      , 'CallBack', complot2);
    uimenu( submenu, 'Label', 'Plot dipole summary as in BESA', 'CallBack', complot3);
    uimenu( submenu, 'Label', 'Plot dipole summary on MRI'    , 'CallBack', complot4);
@
