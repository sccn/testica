head	1.17;
access;
symbols;
locks; strict;
comment	@// @;


1.17
date	2005.05.24.17.59.24;	author arno;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.17.00.49.42;	author arno;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.25.01.06.30;	author arno;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.25.00.58.58;	author arno;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.29.22.44.44;	author arno;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.29.16.39.27;	author arno;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.29.03.13.32;	author arno;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.08.17.35.19;	author arno;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.07.00.45.03;	author arno;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.29.22.17.07;	author arno;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.05.17.50.14;	author arno;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.01.22.23.01;	author arno;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.30.01.46.30;	author arno;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.30.01.43.54;	author arno;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.06.15.58.02;	author roberto;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.04.15.01.38;	author roberto;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.24.10.05.58;	author roberto;	state Exp;
branches;
next	;


desc
@initial submission
@


1.17
log
@remove cell2mat
@
text
@% pop_dipfit_batch() - interactively do batch scan of all ICA components
%                      with a single dipole
%
% Usage: 
%  >> OUTEEG = pop_dipfit_batch( INEEG ); % pop up interactive window
%  >> OUTEEG = pop_dipfit_batch( INEEG, comps );
%  >> OUTEEG = pop_dipfit_batch( INEEG, comps, xgrid, ygrid, zgrid, thresh )
%
% Inputs:
%   INEEG     - input dataset
%   comps     - [integer array] component indices
%   xgrid     - [float array] x-grid. Default is 10 elements between
%               -1 and 1.
%   ygrid     - [float array] y-grid. Default is 10 elements between
%               -1 and 1.
%   zgrid     - [float array] z-grid. Default is 10 elements between
%               -1 and 1.
%   threshold - [float] threshold in percent. Default 40.
%
% Outputs:
%   OUTEEG      output dataset
%
% Authors: Robert Oostenveld, SMI/FCDC, Nijmegen 2003
%          Arnaud Delorme, SCCN, La Jolla 2003

% SMI, University Aalborg, Denmark http://www.smi.auc.dk/
% FC Donders Centre, University Nijmegen, the Netherlands http://www.fcdonders.kun.nl/

% Copyright (C) 2003 Robert Oostenveld, SMI/FCDC roberto@@miba.auc.dk
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

% $Log: pop_dipfit_batch.m,v $
% Revision 1.16  2005/03/17 00:49:42  arno
% debug for electrode with no locations
%
% Revision 1.15  2003/11/25 01:06:30  arno
% header edit
%
% Revision 1.14  2003/11/25 00:58:58  arno
% interface text
%
% Revision 1.13  2003/10/29 22:44:44  arno
% wording of GUI
%
% Revision 1.12  2003/10/29 16:39:27  arno
% fixing return command
%
% Revision 1.11  2003/10/29 03:13:32  arno
% constrain electrodes to sphere
%
% Revision 1.10  2003/10/08 17:35:19  arno
% fixing thresh command line bug
%
% Revision 1.9  2003/10/07 00:45:03  arno
% typo
%
% Revision 1.8  2003/09/29 22:17:07  arno
% debuging new select option
%
% Revision 1.7  2003/08/05 17:50:14  arno
% fixing dipole index for batch
%
% Revision 1.6  2003/07/01 22:23:01  arno
% nothing
%
% Revision 1.5  2003/06/30 01:46:30  arno
% fixing waitbar
%
% Revision 1.4  2003/06/30 01:43:54  arno
% *** empty log message ***
%
% Revision 1.3  2003/03/06 15:58:02  roberto
% fixed bug with channel selection of EEG data
% changed rejection threshold into percent
%
% Revision 1.1  2003/02/24 10:05:58  roberto
% Initial revision
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [OUTEEG, com] = pop_dipfit_batch(EEG, select, xgrid, ygrid, zgrid, reject );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if nargin < 1
   help pop_dipfit_batch;
   return;
end;

OUTEEG = EEG;
com = '';

if ~isfield(EEG, 'chanlocs')
  error('No electrodes present');
end

if ~isfield(EEG, 'icawinv')
  error('No ICA components to fit');
end

if ~isfield(EEG, 'dipfit')
  error('General dipolefit settings not specified');
end

if ~isfield(EEG.dipfit, 'vol')
  error('Dipolefit volume conductor model not specified');
end

dipfitdefs
if nargin < 2
    % get the default values and filenames
    promptstr = { 'Component(s) (not faster if few comp.)', ...
                  'Grid in X-direction', ...
                  'Grid in Y-direction', ...
                  'Grid in Z-direction', ...
                  'Rejection threshold RV(%)' };
    
    inistr    = { 
        [ '1:' int2str(size(EEG.icawinv,2)) ], ...
        xgridstr, ...
        ygridstr, ...
        zgridstr, ...
        rejectstr };

    result = inputdlg2( promptstr, 'Batch dipole fit -- pop_dipfit_batch()', 1,  inistr, 'pop_dipfit_batch');
    
    if length(result)==0
        % user pressed cancel
        return
    end
    
    select = eval( [ '[' result{1} ']' ]);
    xgrid  = eval( result{2} );
    ygrid  = eval( result{3} );
    zgrid  = eval( result{4} );
    reject = eval( result{5} ) / 100;	% string is in percent
    options = { };
else
    if nargin < 2
        select = [1:size(EEG.icawinv,2)];
    end;
    if nargin < 3
        xgrid  = eval( xgridstr );
    end;
    if nargin < 4
        ygrid  = eval( ygridstr );
    end;
    if nargin < 5
        zgrid  = eval( zgridstr );
    end;
    if nargin < 6
        reject  = eval( rejectstr );
    end;
    options = { 'waitbar' 'none' };
end;
    
% make a copy of all electrodes
% -----------------------------
elc = getelecpos(EEG.chanlocs, EEG.dipfit);
chansel = EEG.dipfit.chansel;

% perform batch fit with single dipole for all selected channels and components
model  = dipfit_batch(EEG.icawinv(chansel,select), elc(chansel,:), EEG.dipfit.vol, ...
                      'xgrid', xgrid, 'ygrid', ygrid, 'zgrid', zgrid, options{:});

% discard the models that do not have sufficient quality with a single dipole
model  = dipfit_reject(model, reject);

% subsequent scanning with a symmetric dipole pair could automatically 
% be done on those components that have a poor fit with a single dipole

for index = 1:length(model)
    model(index).active = 1;
    model(index).select = 1;
end;

OUTEEG.dipfit.model(select) = model;

com = sprintf('%s = pop_dipfit_batch( %s,%s);', inputname(1), inputname(1), vararg2str({ select xgrid ygrid zgrid reject }));

% get electrode positions from eeglag
% -----------------------------------
function elc = getelecpos(chanlocs, dipfitstruct);
    for index = 1:length(chanlocs)
        if isempty(chanlocs(index).X)
            chanlocs(index).X = NaN;
            chanlocs(index).Y = NaN;
            chanlocs(index).Z = NaN;
        end;
    end;
            
    elc     = [ [EEG.chanlocs.X]' [EEG.chanlocs.Y]' [EEG.chanlocs.Z]' ];

    % constrain electrode to sphere
    % -----------------------------
    disp('Constraining electrodes to sphere');
    elc = elc - repmat( dipfitstruct.vol.o, [size(elc,1) 1]); % recenter 
    % (note the step above is not needed since the origin should always be 0)
    elc = elc ./ repmat( sqrt(sum(elc.*elc,2)), [1 3]); % normalize
    elc = elc * max(dipfitstruct.vol.r);         % head size
    @


1.16
log
@debug for electrode with no locations
@
text
@d46 3
d204 1
a204 1
    elc = cell2mat({chanlocs.X; chanlocs.Y; chanlocs.Z}');
@


1.15
log
@header edit
@
text
@d46 3
d193 6
a198 6
    try,
        elc = cell2mat({chanlocs.X; chanlocs.Y; chanlocs.Z}');
    catch
        disp('No 3-D carthesian coordinates; re-computing them from 2-D polar coordinates');
        EEG.chanlocs = convertlocs(EEG.chanlocs, 'topo2all');
        elc = cell2mat({chanlocs.X; chanlocs.Y; chanlocs.Z}');
d200 3
@


1.14
log
@interface text
@
text
@d46 3
d118 1
a118 1
    promptstr = { 'Component indices', ...
@


1.13
log
@wording of GUI
@
text
@d46 3
d116 4
a119 4
                  'Grid locations (x)', ...
                  'Grid locations (y)', ...
                  'Grid locations (z)', ...
                  'Acceptance threshold (RV, %)' };
@


1.12
log
@fixing return command
@
text
@d46 3
d113 4
a116 4
                  'Grid in X-direction', ...
                  'Grid in Y-direction', ...
                  'Grid in Z-direction', ...
                  'Rejection threshold (RV, %)' };
@


1.11
log
@constrain electrodes to sphere
@
text
@d46 3
d176 1
a176 1
com = sprintf('%s = pop_dipfit_batch( %s, %s);', vararg2str({ select xgrid ygrid zgrid reject }));
@


1.10
log
@fixing thresh command line bug
@
text
@d46 3
d152 2
a153 1
elc = cell2mat({EEG.chanlocs.X; EEG.chanlocs.Y; EEG.chanlocs.Z}');
d173 20
a192 1
com = sprintf('%s = pop_dipfit_batch( %s, %s);', vararg2str({ select xgrid ygrid zgrid reject }));@


1.9
log
@typo
@
text
@d7 1
a7 1
%  >> OUTEEG = pop_dipfit_batch( INEEG, comps, xgrid, ygrid, zgird, thresh )
d46 3
d73 1
a73 1
function [OUTEEG, com] = pop_dipfit_batch(EEG, select, xgrid, ygrid, zgrid, thresh );
@


1.8
log
@debuging new select option
@
text
@d46 3
d70 1
a70 1
function [OUTEEG, com] = pop_dipfit_batch(EEG, select, xgrid, ygrid, zgird, thresh );
@


1.7
log
@fixing dipole index for batch
@
text
@d46 3
d156 5
@


1.6
log
@nothing
@
text
@d46 3
d153 1
a153 1
OUTEEG.dipfit.model = model;
@


1.5
log
@fixing waitbar
@
text
@d46 3
d112 4
a115 4
    xgrid  = eval( result{1} );
    ygrid  = eval( result{2} );
    zgrid  = eval( result{3} );
    reject = eval( result{4} ) / 100;	% string is in percent
@


1.4
log
@*** empty log message ***
@
text
@d46 3
d113 1
d130 1
d139 1
a139 1
                      'xgrid', xgrid, 'ygrid', ygrid, 'zgrid', zgrid);
@


1.3
log
@fixed bug with channel selection of EEG data
changed rejection threshold into percent
@
text
@d5 3
a7 1
%  >> OUTEEG = pop_dipfit_batch( INEEG, optarg )
d10 9
a18 1
%   INEEG       input dataset
d23 2
a24 1
% Author: Robert Oostenveld, SMI/FCDC, Nijmegen 2003
d46 4
d55 1
a55 1
function [OUTEEG, com] = pop_dipfit_batch(EEG, varargin)
a81 4
% select all ICA components as 'fitable'
select = 1:size(EEG.icawinv,2);

% get the default values and filenames
d83 45
a127 24
promptstr = { strvcat('Grid in X-direction', ''), ...
              strvcat('Grid in Y-direction', ''), ...
              strvcat('Grid in Z-direction', ''), ...
              strvcat('Rejection threshold (RV, %)', ''), ...
            };

inistr    = { xgridstr, ...
              ygridstr, ...
              zgridstr, ...
              rejectstr, ...
            };

result = inputdlg2( promptstr, 'Batch dipole fit -- pop_dipfit_batch()', 1,  inistr, 'pop_dipfit_batch');

if length(result)==0
  % user pressed cancel
  return
end

xgrid  = eval( result{1} );
ygrid  = eval( result{2} );
zgrid  = eval( result{3} );
reject = eval( result{4} ) / 100;	% string is in percent

d133 2
a134 1
model  = dipfit_batch(EEG.icawinv(chansel,select), elc(chansel,:), EEG.dipfit.vol, 'xgrid', xgrid, 'ygrid', ygrid, 'zgrid', zgrid);
d144 1
@


1.2
log
@support for BEM added
using chanlocs instead of dipfit.elc
@
text
@d75 1
a75 1
              strvcat('Rejection threshold', ''), ...
d94 1
a94 1
reject = eval( result{4} );
d96 3
a98 2
% make a copy of the electrodes, with only the selected ones
elc = cell2mat({EEG.chanlocs(EEG.dipfit.chansel).X; EEG.chanlocs(EEG.dipfit.chansel).Y; EEG.chanlocs(EEG.dipfit.chansel).Z}');
d100 2
a101 2
% perform batch fit with single dipole for all selected components
model  = dipfit_batch(EEG.icawinv(:,select), elc, EEG.dipfit.vol, 'xgrid', xgrid, 'ygrid', ygrid, 'zgrid', zgrid);
@


1.1
log
@Initial revision
@
text
@d35 3
d51 4
d67 2
a68 3
if ~isfield(EEG.dipfit, 'elc')
  error('Dipolefit electrode definition not specified');
end
d95 3
a97 1
select = 1:size(EEG.icawinv,2);
d100 1
a100 1
model  = dipfit_batch(EEG.icawinv(:,select), EEG.dipfit.elc, EEG.dipfit.vol, 'xgrid', xgrid, 'ygrid', ygrid, 'zgrid', zgrid);
@
